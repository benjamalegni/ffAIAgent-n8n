{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "url": "={{ $json.sources }}",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        -128,
        288
      ],
      "id": "2f79b29c-a717-481b-95a2-1d5688a191f3",
      "name": "RSS Read"
    },
    {
      "parameters": {
        "maxItems": 15
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        96,
        288
      ],
      "id": "9ebc3f29-556c-4db5-a8d5-de32e0b37d9a",
      "name": "Limit"
    },
    {
      "parameters": {
        "jsCode": "const noticias = [];\n\nfor (const item of $(\"Limit\").all()) {\n  noticias.push({\n    title: item.json.title || item.json.contentSnippet,\n  });\n}\n\nconst output = JSON.stringify(noticias, null, 2);\n\nreturn [\n  {\n    json: {\n      noticiasTexto: output\n    }\n  }\n];\n\n\nreturn [\n  {\n    json: {\n      noticias\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        304,
        160
      ],
      "id": "463b4467-4c6e-4bf8-b008-ff095e461499",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "\nlet raw = $(\"AI Agent\").last().json.text\n       ?? $(\"AI Agent\").last().json.output\n       ?? $(\"AI Agent\").last().json.completion\n       ?? \"\";\n\n// 1. Limpiar encabezados como \"Here is your JSON:\"\nlet clean = raw.replace(/^(Here is (your )?(the )?(valid )?JSON(:)?)/i, '').trim();\n\n// 2. Quitar delimitadores de bloque Markdown (```)\nclean = clean\n  .replace(/^```(?:json|markdown)?\\n?/i, '')   // inicio ```json\n  .replace(/\\n?```$/g, '')                     // cierre ```\n\n// 3. Extraer solo el contenido JSON hasta el √∫ltimo cierre de llave\nconst endIndex = clean.lastIndexOf('}');\nif (endIndex !== -1) {\n  clean = clean.slice(0, endIndex + 1);\n} else {\n  throw new Error(\"No se encontr√≥ el cierre del JSON (`}`)\");\n}\n\n// 4. Parsear el JSON\nlet parsed;\ntry {\n  parsed = JSON.parse(clean);\n} catch (err) {\n  throw new Error(\"Error al parsear JSON limpio: \" + err.message + \"\\nContenido:\\n\" + clean);\n}\n\nreturn [{ json: parsed }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1392,
        288
      ],
      "id": "98eba02a-abf1-4327-b213-4d27a9a4212f",
      "name": "md to json"
    },
    {
      "parameters": {
        "jsCode": "function transformSingleToMarkdown(name, item) {\n  const impactEmoji = item.impact === 'positive' ? 'üü¢' : \n                      item.impact === 'negative' ? 'üî¥' : 'üü°';\n\n  const horizonEmoji = item.horizon === 'short' ? '‚ö°' : \n                       item.horizon === 'medium' ? 'üìÖ' : 'üìà';\n\n  const markdown = `${impactEmoji} **${name} - ${item.impact || 'N/A'}**\\n\\n` +\n                   `üì∞ ${item.news || 'No news'}\\n\\n` +\n                   `üí° *Reason:* ${item.reason || 'No reason'}\\n\\n` +\n                   `${horizonEmoji} *Horizon:* ${item.horizon || 'N/A'}\\n`;\n\n  return markdown;\n}\n\nconst forecast = $input.first().json.forecast;\n\nconst outputArray = Object.entries(forecast).map(([asset, data]) => {\n  return {\n      asset,\n      markdown: transformSingleToMarkdown(asset, data)\n\n  };\n});\n\n// Devolv√©s un solo item con un atributo `output` que contiene el array\nreturn [\n  {\n    json: {\n      output: outputArray\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        -32
      ],
      "id": "d8ffa3f0-a0ea-42d9-9bc4-37b0809c0e68",
      "name": "json to md"
    },
    {
      "parameters": {
        "jsCode": "let input = $input.first().json.output\nlet output = \"\"\n\nfor (let i = 0; i < input.length; i++) {\n  output += input[i].markdown;\n  if(i!=input.length-1){\n    output += \"\\n-------------------------------------\\n\";\n  }\n}\n\nreturn {\n  json: {\n    markdown: output\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1264,
        -32
      ],
      "id": "bcfb6ff0-d9bc-4aca-bd60-c0aaa3d6df66",
      "name": "mergeAssets-to-Message"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "analyze-stocks",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -512,
        512
      ],
      "id": "edd44933-1ac4-40c5-87ec-058a5c56da52",
      "name": "Webhook",
      "webhookId": "be1d19f2-87cd-46be-a80f-451e7747ef22"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "135e343f-dc5b-4b1e-b199-347b2838f4eb",
              "name": "sources",
              "value": "[\"https://rss.app/feeds/ZJW3cBackpq4yzlF.xml\",\"https://rss.app/feeds/tgMCu0kHzk05QAtP.xml\"]",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -112,
        -64
      ],
      "id": "28f9dd16-e47f-4021-aa41-61eed969ebda",
      "name": "sources"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "clashHandling": {
            "values": {
              "resolveClash": "preferInput1"
            }
          }
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        368,
        384
      ],
      "id": "0b02193e-b10b-496d-bd4c-64847a7592ff",
      "name": "Merge"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "response",
                "value": "All Nodes"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1648,
        416
      ],
      "id": "cb6de82e-fe05-45a5-bba8-ab585f23bc84",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "const prompt = `You are a senior financial analyst.\nGiven the following news, return only affected assets in valid JSON format.\n\nInstructions:\n- Wrap output inside a \"forecast\" object.\n- For each affected asset, return: \"impact\", \"news\", \"reason\", \"horizon\".\n- Only include directly affected assets (no speculation).\n- Strict JSON only, no explanation or extra text.\n- Avoid special characters that break JSON.\n\nAssets to analyze:\n`\nconst ex = `. OUTPUT FORMAT EXAMPLE:\n{\"forecast\": {\n  \"S&P500\": {\n    \"impact\": \"negative\",\n    \"news\": \"Federal Reserve announces...\",\n    \"reason\": \"Higher rates increase borrowing costs...\",\n    \"horizon\": \"short\"\n  },\n  \"Gold\": {\n    \"impact\": \"positive\",\n    \"news\": \"Geopolitical tensions escalate...\",\n    \"reason\": \"Investors seek safe haven...\",\n    \"horizon\": \"medium\"\n  }\n}}`\n\nlet output = prompt.concat($input.first().json.noticiasTexto).concat(ex)\n$input.first().json.noticiasTexto\nreturn [\n  {\n    json: {\n      output\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        384
      ],
      "id": "8d698c85-2011-44dc-aeaa-65d3fc224c5a",
      "name": "prompt"
    },
    {
      "parameters": {
        "fieldToSplitOut": "sources",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        256,
        -64
      ],
      "id": "6b8e0ae5-3b1c-4de9-bf50-44b003ee1a85",
      "name": "Split sources"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        784,
        384
      ],
      "id": "c1f800fb-59b2-40b7-9ffc-c166df360f27",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5",
          "mode": "list",
          "cachedResultName": "gpt-5"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        736,
        592
      ],
      "id": "e1a424c5-2f30-488f-a66e-c063878e1f55",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "QDFBqmlQVGof7x9S",
          "name": "OpenAi account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        864,
        592
      ],
      "id": "22b7d954-46a7-4292-a7f6-a5d80cf0ebc9",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "Ae4ojL3g1d80n3UI",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "RSS Read": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "md to json": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "json to md": {
      "main": [
        [
          {
            "node": "mergeAssets-to-Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "sources",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sources": {
      "main": [
        [
          {
            "node": "Split sources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prompt": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split sources": {
      "main": [
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "md to json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d714e0aa-c6f0-4bf8-9b40-5f1ca35469e9",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "307b4d5a47f2500169f892fb02f9bfc5a9821d89acc51136deaf73eb28768127"
  },
  "id": "pdyffYq6hfPaWE4k",
  "tags": []
}
